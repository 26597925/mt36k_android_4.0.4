on early-init
    start ueventd

on init
    export PATH /sbin
    export ANDROID_ROOT /system
    export ANDROID_DATA /data
    export EXTERNAL_STORAGE /sdcard

    symlink /system/etc /etc

    mkdir /mnt
    mkdir /mnt/sdcard
    mkdir /mnt/usb
    mkdir /system
    mkdir /data
    mkdir /cache
    mount /tmp /tmp tmpfs
    insmod /dtv_driver_adpt.ko osd1_src_width=960 osd1_src_height=540 osd2_src_width=960 osd2_src_height=540 
    
    attach_ubifs system mtd@system /system sync
    attach_ubifs userdata mtd@userdata /data nosuid nodev sync
    attach_ubifs cache mtd@cache /cache nosuid nodev sync
		
	  mount ubifs ubi1:system /system sync
    mount ubifs ubi2:userdata /data nosuid nodev sync
    mount ubifs ubi3:cache /cache nosuid nodev sync
    
    chmod 0755 /format.sh

on boot

    ifup lo
    hostname localhost
    domainname localdomain

    class_start default

service console /sbin/sh
    console

service ueventd /sbin/ueventd
    critical

service recovery /sbin/recovery
    console
    oneshot

#service adbd /sbin/adbd recovery
#    disabled

# Always start adbd on userdebug and eng builds
#on property:ro.debuggable=1
#    write /sys/class/android_usb/android0/enable 0
#    write /sys/class/android_usb/android0/idVendor 18D1
#    write /sys/class/android_usb/android0/idProduct D001
#    write /sys/class/android_usb/android0/functions adb
#    write /sys/class/android_usb/android0/enable 1
#    write /sys/class/android_usb/android0/iManufacturer $ro.product.manufacturer
#    write /sys/class/android_usb/android0/iProduct $ro.product.model
#    write /sys/class/android_usb/android0/iSerial $ro.serialno
#    start adbd

# Restart adbd so it can run as root
#on property:service.adb.root=1
#    write /sys/class/android_usb/android0/enable 0
#    restart adbd
#    write /sys/class/android_usb/android0/enable 1
